{"uid":"eb89b9247b1ec3","name":"test_no_labels","fullName":"tests.test_labels#test_no_labels","historyId":"f3adf28ee296794970cdbc37f6561df8","time":{"start":1697454996072,"stop":1697454996072,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 118\nCurrent browser version is 117.0.5938.132 with binary path /opt/google/chrome/chrome\nStacktrace:\n#0 0x55dbe1e3ffb3 <unknown>\n#1 0x55dbe1b134a7 <unknown>\n#2 0x55dbe1b4b95b <unknown>\n#3 0x55dbe1b4ac1a <unknown>\n#4 0x55dbe1b45acf <unknown>\n#5 0x55dbe1b4310c <unknown>\n#6 0x55dbe1b85ac6 <unknown>\n#7 0x55dbe1b7c713 <unknown>\n#8 0x55dbe1b4f18b <unknown>\n#9 0x55dbe1b4ff7e <unknown>\n#10 0x55dbe1e058d8 <unknown>\n#11 0x55dbe1e09800 <unknown>\n#12 0x55dbe1e13cfc <unknown>\n#13 0x55dbe1e0a418 <unknown>\n#14 0x55dbe1dd742f <unknown>\n#15 0x55dbe1e2e4e8 <unknown>\n#16 0x55dbe1e2e6b4 <unknown>\n#17 0x55dbe1e3f143 <unknown>\n#18 0x7f5b1a894b43 <unknown>","statusTrace":"self = <allure_commons._allure.fixture object at 0x7f3ff68b2850>, args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/allure_commons/_allure.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:23: in browser_management\n    browser.quit()\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/entity.py:1205: in quit\n    self.driver.quit()\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/entity.py:1100: in driver\n    return self.config.driver\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/configuration.py:343: in __get__\n    driver = config.build_driver_strategy(config)\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/configuration.py:171: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/configuration.py:93: in install_and_build_chrome\n    return Chrome(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:56: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:205: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3ff76c2350>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\\\n#16 0x55dbe1e2e6b4 \\\\u003Cunknown>\\\\n#17 0x55dbe1e3f143 \\\\u003Cunknown>\\\\n#18 0x7f5b1a894b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 118\nE       Current browser version is 117.0.5938.132 with binary path /opt/google/chrome/chrome\nE       Stacktrace:\nE       #0 0x55dbe1e3ffb3 <unknown>\nE       #1 0x55dbe1b134a7 <unknown>\nE       #2 0x55dbe1b4b95b <unknown>\nE       #3 0x55dbe1b4ac1a <unknown>\nE       #4 0x55dbe1b45acf <unknown>\nE       #5 0x55dbe1b4310c <unknown>\nE       #6 0x55dbe1b85ac6 <unknown>\nE       #7 0x55dbe1b7c713 <unknown>\nE       #8 0x55dbe1b4f18b <unknown>\nE       #9 0x55dbe1b4ff7e <unknown>\nE       #10 0x55dbe1e058d8 <unknown>\nE       #11 0x55dbe1e09800 <unknown>\nE       #12 0x55dbe1e13cfc <unknown>\nE       #13 0x55dbe1e0a418 <unknown>\nE       #14 0x55dbe1dd742f <unknown>\nE       #15 0x55dbe1e2e4e8 <unknown>\nE       #16 0x55dbe1e2e6b4 <unknown>\nE       #17 0x55dbe1e3f143 <unknown>\nE       #18 0x7f5b1a894b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser_management","time":{"start":1697454996071,"stop":1697454996072,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 118\nCurrent browser version is 117.0.5938.132 with binary path /opt/google/chrome/chrome\nStacktrace:\n#0 0x55dbe1e3ffb3 <unknown>\n#1 0x55dbe1b134a7 <unknown>\n#2 0x55dbe1b4b95b <unknown>\n#3 0x55dbe1b4ac1a <unknown>\n#4 0x55dbe1b45acf <unknown>\n#5 0x55dbe1b4310c <unknown>\n#6 0x55dbe1b85ac6 <unknown>\n#7 0x55dbe1b7c713 <unknown>\n#8 0x55dbe1b4f18b <unknown>\n#9 0x55dbe1b4ff7e <unknown>\n#10 0x55dbe1e058d8 <unknown>\n#11 0x55dbe1e09800 <unknown>\n#12 0x55dbe1e13cfc <unknown>\n#13 0x55dbe1e0a418 <unknown>\n#14 0x55dbe1dd742f <unknown>\n#15 0x55dbe1e2e4e8 <unknown>\n#16 0x55dbe1e2e6b4 <unknown>\n#17 0x55dbe1e3f143 <unknown>\n#18 0x7f5b1a894b43 <unknown>","statusTrace":"self = <allure_commons._allure.fixture object at 0x7f3ff68b2850>, args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/allure_commons/_allure.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:23: in browser_management\n    browser.quit()\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/entity.py:1205: in quit\n    self.driver.quit()\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/entity.py:1100: in driver\n    return self.config.driver\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/configuration.py:343: in __get__\n    driver = config.build_driver_strategy(config)\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/configuration.py:171: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/configuration.py:93: in install_and_build_chrome\n    return Chrome(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:56: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:205: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3ff76c2350>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\\\n#16 0x55dbe1e2e6b4 \\\\u003Cunknown>\\\\n#17 0x55dbe1e3f143 \\\\u003Cunknown>\\\\n#18 0x7f5b1a894b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 118\nE       Current browser version is 117.0.5938.132 with binary path /opt/google/chrome/chrome\nE       Stacktrace:\nE       #0 0x55dbe1e3ffb3 <unknown>\nE       #1 0x55dbe1b134a7 <unknown>\nE       #2 0x55dbe1b4b95b <unknown>\nE       #3 0x55dbe1b4ac1a <unknown>\nE       #4 0x55dbe1b45acf <unknown>\nE       #5 0x55dbe1b4310c <unknown>\nE       #6 0x55dbe1b85ac6 <unknown>\nE       #7 0x55dbe1b7c713 <unknown>\nE       #8 0x55dbe1b4f18b <unknown>\nE       #9 0x55dbe1b4ff7e <unknown>\nE       #10 0x55dbe1e058d8 <unknown>\nE       #11 0x55dbe1e09800 <unknown>\nE       #12 0x55dbe1e13cfc <unknown>\nE       #13 0x55dbe1e0a418 <unknown>\nE       #14 0x55dbe1dd742f <unknown>\nE       #15 0x55dbe1e2e4e8 <unknown>\nE       #16 0x55dbe1e2e6b4 <unknown>\nE       #17 0x55dbe1e3f143 <unknown>\nE       #18 0x7f5b1a894b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","steps":[],"attachments":[{"uid":"83a94d8a98d3736f","name":"stderr","source":"83a94d8a98d3736f.txt","type":"text/plain","size":656}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"browser_management::0","time":{"start":1697454996072,"stop":1697454998230,"duration":2158},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 118\nCurrent browser version is 117.0.5938.132 with binary path /opt/google/chrome/chrome\nStacktrace:\n#0 0x55dbe1e3ffb3 <unknown>\n#1 0x55dbe1b134a7 <unknown>\n#2 0x55dbe1b4b95b <unknown>\n#3 0x55dbe1b4ac1a <unknown>\n#4 0x55dbe1b45acf <unknown>\n#5 0x55dbe1b4310c <unknown>\n#6 0x55dbe1b85ac6 <unknown>\n#7 0x55dbe1b7c713 <unknown>\n#8 0x55dbe1b4f18b <unknown>\n#9 0x55dbe1b4ff7e <unknown>\n#10 0x55dbe1e058d8 <unknown>\n#11 0x55dbe1e09800 <unknown>\n#12 0x55dbe1e13cfc <unknown>\n#13 0x55dbe1e0a418 <unknown>\n#14 0x55dbe1dd742f <unknown>\n#15 0x55dbe1e2e4e8 <unknown>\n#16 0x55dbe1e2e6b4 <unknown>\n#17 0x55dbe1e3f143 <unknown>\n#18 0x7f5b1a894b43 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 911, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/qa_guru_python_7/qa_guru_python_7/tests/conftest.py\", line 23, in browser_management\n    browser.quit()\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/entity.py\", line 1205, in quit\n    self.driver.quit()\n    ^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/entity.py\", line 1100, in driver\n    return self.config.driver\n           ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 343, in __get__\n    driver = config.build_driver_strategy(config)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 171, in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n           ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 93, in install_and_build_chrome\n    return Chrome(\n           ^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py\", line 56, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 205, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 289, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_labels"},{"name":"host","value":"fv-az244-344"},{"name":"thread","value":"2246-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_labels"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":2,"unknown":0,"total":6},"items":[{"uid":"b30c2a36bc0b91c1","reportUrl":"https://vapolonov.github.io/qa_guru_python_7/10//#testresult/b30c2a36bc0b91c1","status":"broken","statusDetails":"ImportError: cannot import name 'ChromeType' from 'webdriver_manager.core.utils' (/opt/hostedtoolcache/Python/3.11.5/x64/lib/python3.11/site-packages/webdriver_manager/core/utils.py)","time":{"start":1697444619936,"stop":1697444619936,"duration":0}},{"uid":"822c57b84ccee71a","reportUrl":"https://vapolonov.github.io/qa_guru_python_7/9//#testresult/822c57b84ccee71a","status":"passed","time":{"start":1688982500808,"stop":1688982500808,"duration":0}},{"uid":"16ef7a2d361eaf71","reportUrl":"https://vapolonov.github.io/qa_guru_python_7/8//#testresult/16ef7a2d361eaf71","status":"passed","time":{"start":1688981953103,"stop":1688981953103,"duration":0}},{"uid":"ecc51d45529e06b7","reportUrl":"https://vapolonov.github.io/qa_guru_python_7/7//#testresult/ecc51d45529e06b7","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x563ea10fb4e3 <unknown>\n#1 0x563ea0e2ac76 <unknown>\n#2 0x563ea0e53d78 <unknown>\n#3 0x563ea0e50029 <unknown>\n#4 0x563ea0e8eccc <unknown>\n#5 0x563ea0e8e47f <unknown>\n#6 0x563ea0e85de3 <unknown>\n#7 0x563ea0e5b2dd <unknown>\n#8 0x563ea0e5c34e <unknown>\n#9 0x563ea10bb3e4 <unknown>\n#10 0x563ea10bf3d7 <unknown>\n#11 0x563ea10c9b20 <unknown>\n#12 0x563ea10c0023 <unknown>\n#13 0x563ea108e1aa <unknown>\n#14 0x563ea10e46b8 <unknown>\n#15 0x563ea10e4847 <unknown>\n#16 0x563ea10f4243 <unknown>\n#17 0x7fd10b32db43 <unknown>","time":{"start":1688980170491,"stop":1688980170491,"duration":0}},{"uid":"17889c85699dc811","reportUrl":"https://vapolonov.github.io/qa_guru_python_7/5//#testresult/17889c85699dc811","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55e2ca61b4e3 <unknown>\n#1 0x55e2ca34ac76 <unknown>\n#2 0x55e2ca373d78 <unknown>\n#3 0x55e2ca370029 <unknown>\n#4 0x55e2ca3aeccc <unknown>\n#5 0x55e2ca3ae47f <unknown>\n#6 0x55e2ca3a5de3 <unknown>\n#7 0x55e2ca37b2dd <unknown>\n#8 0x55e2ca37c34e <unknown>\n#9 0x55e2ca5db3e4 <unknown>\n#10 0x55e2ca5df3d7 <unknown>\n#11 0x55e2ca5e9b20 <unknown>\n#12 0x55e2ca5e0023 <unknown>\n#13 0x55e2ca5ae1aa <unknown>\n#14 0x55e2ca6046b8 <unknown>\n#15 0x55e2ca604847 <unknown>\n#16 0x55e2ca614243 <unknown>\n#17 0x7fb97815bb43 <unknown>","time":{"start":1688978995784,"stop":1688978995785,"duration":1}}]},"tags":[]},"source":"eb89b9247b1ec3.json","parameterValues":[]}